<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictNDLLogo.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAgY0hSTQAAeiYAAICEAAD6AAAAgOgAAHUwAADqYAAAOpgAABdwnLpRPAAAA19JREFUWEfFlzFu
        20AQRZlGBxDSuw90ATVO5QsYaQ3VAXQAFUbgxn3glC7kIlXcplKlRhdQ50atGhW+wYZvqScPKUqWaQMh
        MNjlkpz/58/skPyUyqP4D8dmsynW63VRQGC1WqXlclmzxWKRsPl8vjPuabu3+ewp5/i+u7tLmYBgjI+P
        j2k2K9LTU8N+Fen+vsgPxfu7zsEZj8d1AoI/P8ML+1vaeDsv0vOfksT3Ij+IMl3BeW4ymaSzs7MXAjgk
        8hdwtIEAR0WCa5IYjUYfS+D29jY7ryIHUHDGFyUygTIV51+KxDPku4sSNQWIHmnrBKICPzMpFUCpq69F
        GgwGORVdSNQITKfTBoGoQoh+m4LZj5LAVZFzSD28WwGkvP5WKZCj3BVhlRLXuE70pAAF+v1+ohZOTQVq
        UeiMNQVwgEMcA8IW3IGWZPI569uteHNT1QAKQADD8TElBOc+rEbg4eF3dojjvBNQomFGzj3I3+v1dgRI
        w7FUCBqbWo0ARUQ05+cVCZTAACXfngsOWQhcXFyky8vLDM5IIE0VWNOUf68P0F7pcDiGBBFeX1dkMOqD
        NdIkODtAYEdSGQlEYMA5N1V7jQgS5DKT+LwlUgJm0JIU6xQdkTPiAAWsAcbYIdlZmsCS2CtCWZOKHYmt
        zEaciZVG5IBz33A4zKAQsQ5QAWAUlYBza2GvCKNsKMEN1ITRMgeYPAMguApAxHWIABjll5BKMO6loEmC
        cwBwrryMrsXoWQcUgsxxDiGMdQJSDdNwlADgpINcAUT0jJqRA8gcECKXKMBEybokogqvKhBrAsYR2CgF
        N1LrQBJG7PVYFycTUAkeds/Hqtd5lJ65vcHoHS3G1u+BY22UdPCw0ZljRsGbaeAaaZGkJHx7vloDbYR0
        iuM4x7nNCJKQ4rrGdebxfdGJAKmIRSWwoBaiRWpvcGvGoDoR8EvW6m7bdpKItQJYU9HOBNqqO245U6Mq
        kET65ldTZwKqoKyx3aKMxWiLBqjtk+1dBOz3vl7jex4CqkD/aHtFv3kbNvMHAbeTf0H+1MT6QP5D2/td
        Chz6/IKUO4WdcEj+PQXe8lmtpIf+JyHgtwJEue9QT8l/Rr50YuM4NpdA288sCvhabjajNp+ZAA7ZMpyc
        YkTYFpHyGz0pOMXfP2ClxJYXJNCAAAAAAElFTkSuQmCC
</value>
  </data>
  <data name="lblAboutText.Text" xml:space="preserve">
    <value>Gamebryo Animation Tool
For use with Gamebryo %GAMEBRYO_SDK_VERSION_STRING%

Copyright ?1996-2006 Emergent Game Technologies
All Rights Reserved

This software is supplied under the terms of a license agreement or nondisclosure agreement with Emergent Game Technologies and may not be copied or disclosed except in accordance with the terms of that agreement.

Emergent Game Technologies, Chapel Hill, North Carolina 27517
</value>
  </data>
</root>