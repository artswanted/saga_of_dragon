#ifndef WEAPON_VARIANT_BASIC_CONSTANT_CONSTANT_H
#define WEAPON_VARIANT_BASIC_CONSTANT_CONSTANT_H

//#pragma comment(lib, "winmm.lib")

// Action Argument Type
#define ACTARG_MAPOBJ		1
//#define ACTARG_ZONEOBJ	2
//#define ACTARG_UNITMNG	3
//#define ACTARG_PUPPETMNG	4
//#define ACTARG_PUPPET		5
//#define ACTARG_WORLDACTION	6
//#define ACTARG_PUPPETGROUP	7
#define ACTARG_OLD_VALUE	8
#define ACTARG_EFFECT_NUM	9
#define ACTARG_ACTIONINSTANCEID	11
#define ACTARG_ABILITYVALUE	12
//#define ACTARG_DELAYTIME	13
#define ACTARG_WAYPOINTMNG	14	// PgWayPointMng
#define ACTARG_WEAPONLIMIT	15
#define ACTARG_DEL_EFFECT	16
#define ACTARG_TOGGLESKILL	17
#define ACTARG_ITEMNO		18
#define ACTARG_FORCE_SKILL_PARAM	19
#define ACTARG_ACTION_TIMESTAMP	21	// 클라이언트로 부터 도착한 Action의 TimeStamp
#define ACTARG_GROUND		400	// PgGround
#define ACTARG_GROUND_NO	401
#define ACTARG_CUSTOM_UNIT1	1001
#define ACTARG_CUSTOM_UNIT1_TYPE	1002
#define ACTARG_EQUIP_WEAPON_PHY_ATTACK_MIN		AT_EQUIP_WEAPON_PHY_ATTACK_MIN
#define ACTARG_EQUIP_WEAPON_PHY_ATTACK_MAX		AT_EQUIP_WEAPON_PHY_ATTACK_MAX
#define ACTARG_EQUIP_WEAPON_MAGIC_ATTACK_MIN	AT_EQUIP_WEAPON_MAGIC_ATTACK_MIN
#define ACTARG_EQUIP_WEAPON_MAGIC_ATTACK_MAX	AT_EQUIP_WEAPON_MAGIC_ATTACK_MAX

// Effect에서 사용할 Action Argument Type 100 ~ 300
#define ACTARG_EFFECT_CASTER_USE_CHAOS_DEBUFF 100
#define ACTARG_EFFECT_CASTER_UNIT_TYPE 101

// RESERVED (10000 - 19999) : CUSTOM DATA
#define ACT_ARG_CUSTOMDATA1 10000
#define ACT_ARG_DAMAGE 11000
#define ACT_ARG_DMG_BY_PASE_BEGIN_TIME 15000
#define ACT_ARG_DMG_BY_PASE_ACC_DMG 15001

typedef enum
{
	ERACE_UNKNOWN = 0,
	ERACE_HUMAN = 1,
	ERACE_DRAGON = 2,
}ERACE_TYPE;

typedef enum {
	UCLASS_FIGHTER = 1,		// 전사			0000 0000 0000 0002
	UCLASS_MAGICIAN = 2,	// 매지션		0000 0000 0000 0004
	UCLASS_ARCHER = 3,		// 궁수			0000 0000 0000 0008
	UCLASS_THIEF = 4,		// 도둑			0000 0000 0000 0010
	UCLASS_KNIGHT = 5,		// 기사			0000 0000 0000 0020
	UCLASS_WARRIOR = 6,		// 투사			0000 0000 0000 0040
	UCLASS_MAGE = 7,		// 메이지		0000 0000 0000 0080
	UCLASS_BATTLEMAGE = 8,	// 전투마법사	0000 0000 0000 0100
	UCLASS_HUNTER = 9,		// 사냥꾼		0000 0000 0000 0200
	UCLASS_RANGER = 10,		// 레인저		0000 0000 0000 0400
	UCLASS_CLOWN = 11,		// 광대			0000 0000 0000 0800
	UCLASS_ASSASSIN =12,	// 암살자		0000 0000 0000 1000
	UCLASS_PALADIN = 13,	// 성기사
	UCLASS_GLADIATOR = 14,	// 검투사
	UCLASS_WIZARD = 15,		// 위자드
	UCLASS_WARMAGE = 16,	// 워메이지
	UCLASS_TRAPPER = 17,	// 트랩퍼
	UCLASS_SNIPER = 18,		// 저격수
	UCLASS_DANCER = 19,		// 댄서
	UCLASS_NINJA = 20,		// 닌자
	UCLASS_DRAOON = 21,		// 용기사
	UCLASS_DESTROYER = 22,	// 파괴자
	UCLASS_ARCHMAGE = 23,	// 아크메이지
	UCLASS_WARLORD = 24,	// 워로드
	UCLASS_SENTINEL = 25,	// 수호자
	UCLASS_LAUNCHER = 26,	// 런처
	UCLASS_MANIAC = 27,	// 매니악
	UCLASS_SHADOW = 28,		// 새도우
	//Hidden
	UCLASS_DUELIST = 29,	// 무도가
	UCLASS_DOCTOR = 30,		// 닥터
	UCLASS_GUNSLINGER = 31,	// 건슬링거
	UCLASS_BARD = 32,		// 음유시인
	UCLASS_BATTLEMASTER = 33,	// 패와
	UCLASS_ANATOMIST = 34,	// 분석가
	UCLASS_DESPERADO = 35,	// 무법자
	UCLASS_VOCAL = 36,		// 보컬
	//신종족
	UCLASS_SHAMAN = 51,				// 샤먼
	UCLASS_DOUBLE_FIGHTER = 52,		// 더블 파이터
	UCLASS_SUMMONER	= 53,			// 소환사
	UCLASS_TWINS= 54,				// 쌍둥이
	UCLASS_BEAST_MASTER	= 55,		// 비스트 마스터
	UCLASS_MIRAGE		= 56,		// 미라지
	UCLASS_GAIA_MASTER	= 57,	// 가이아 마스터
	UCLASS_DRAGON_FIGHTER	= 58,	// 드래곤파이터
	UCLASS_ECHIDNA	= 59,	// 5th job shaman
	UCLASS_DRAGON_SHADOW = 60,	// 5th double fighter
	UCLASS_MAX,// 순서대로 정의하고 반드시 이걸 맨마지막에 정의할것
} EPCLASS_TYPE;

__int64 const	INT64_1 = 1;
typedef enum : __int64 {
	// 1차 Class
	UCLIMIT_FIGHTER = INT64_1 << UCLASS_FIGHTER,
	UCLIMIT_MAGICIAN = INT64_1 << UCLASS_MAGICIAN,
	UCLIMIT_ARCHER = INT64_1 << UCLASS_ARCHER,
	UCLIMIT_THIEF = INT64_1 << UCLASS_THIEF,

	// 2차 Class
	UCLIMIT_KNIGHT = INT64_1 << UCLASS_KNIGHT,
	UCLIMIT_WARRIOR = INT64_1 << UCLASS_WARRIOR,
	UCLIMIT_MAGE = INT64_1 << UCLASS_MAGE,				// 메이지		0000 0000 0000 0080
	UCLIMIT_BATTELMAGE = INT64_1 <<  UCLASS_BATTLEMAGE,	// 전투마법사	0000 0000 0000 0100
	UCLIMIT_HUNTER = INT64_1 << UCLASS_HUNTER,			// 사냥꾼		0000 0000 0000 0200
	UCLIMIT_RANGER = INT64_1 << UCLASS_RANGER,			// 레인저		0000 0000 0000 0400
	UCLIMIT_CLOWN = INT64_1 << UCLASS_CLOWN,				// 광대			0000 0000 0000 0800
	UCLIMIT_ASSASSIN = INT64_1 << UCLASS_ASSASSIN,		// 암살자		0000 0000 0000 1000

	// 3차 class(1)
	UCLIMIT_PALADIN = INT64_1 << UCLASS_PALADIN,			// 성기사
	UCLIMIT_GLADIATOR = INT64_1 << UCLASS_GLADIATOR,		// 검투사
	UCLIMIT_WIZARD = INT64_1 << UCLASS_WIZARD,		// 위자드
	UCLIMIT_WARMAGE = INT64_1 << UCLASS_WARMAGE,	// 워메이지
	UCLIMIT_TRAPPER = INT64_1 << UCLASS_TRAPPER,	// 트랩퍼
	UCLIMIT_SNIPER = INT64_1 << UCLASS_SNIPER,		// 저격수
	UCLIMIT_DANCER = INT64_1 << UCLASS_DANCER,		// 댄서
	UCLIMIT_NINJA = INT64_1 << UCLASS_NINJA,		// 닌자
	// 3차 class(2)
	UCLIMIT_DRAOON = INT64_1 << UCLASS_DRAOON,		// 용기사
	UCLIMIT_DESTROYER = INT64_1 << UCLASS_DESTROYER,	// 파괴자
	UCLIMIT_ARCHMAGE = INT64_1 << UCLASS_ARCHMAGE,	// 아크메이지
	UCLIMIT_WARLORD = INT64_1 << UCLASS_WARLORD,	// 워로드
	UCLIMIT_SENTINEL = INT64_1 << UCLASS_SENTINEL,	// 수호자
	UCLIMIT_LAUNCHER = INT64_1 << UCLASS_LAUNCHER,	// 런처
	UCLIMIT_MANIAC = INT64_1 << UCLASS_MANIAC,	// 매니악
	UCLIMIT_SHADOW = INT64_1 << UCLASS_SHADOW,		// 새도우
	//Hidden
	UCLIMIT_DUELIST = INT64_1 << UCLASS_DUELIST,	// 무도가
	UCLIMIT_DOCTOR = INT64_1 << UCLASS_DOCTOR,		// 닥터
	UCLIMIT_GUNSLINGER = INT64_1 << UCLASS_GUNSLINGER,	// 건슬링거
	UCLIMIT_BARD = INT64_1 << UCLASS_BARD,		// 음유시인
	UCLIMIT_BATTLEMASTER = INT64_1 << UCLASS_BATTLEMASTER,	// 패왕
	UCLIMIT_ANATOMIST = INT64_1 << UCLASS_ANATOMIST,	// 분석가
	UCLIMIT_DESPERADO = INT64_1 << UCLASS_DESPERADO,	// 무법자
	UCLIMIT_VOCAL = INT64_1 << UCLASS_VOCAL,		// 보컬
	
	// 신종족
	UCLIMIT_SHAMAN = INT64_1 << UCLASS_SHAMAN,
	UCLIMIT_DOUBLE_FIGHTER = INT64_1 << UCLASS_DOUBLE_FIGHTER,
	UCLIMIT_SUMMONER = INT64_1 << UCLASS_SUMMONER,
	UCLIMIT_TWINS = INT64_1 << UCLASS_TWINS,
	UCLIMIT_BEAST_MASTER = INT64_1 << UCLASS_BEAST_MASTER,
	UCLIMIT_MIRAGE = INT64_1 << UCLASS_MIRAGE,
	UCLIMIT_GAIA_MASTER = INT64_1 << UCLASS_GAIA_MASTER,
	UCLIMIT_DRAGON_FIGHTER = INT64_1 << UCLASS_DRAGON_FIGHTER,
	UCLIMIT_ECHIDNA = INT64_1 << UCLASS_ECHIDNA,
	UCLIMIT_DRAGON_SHADOW = INT64_1 << UCLASS_DRAGON_SHADOW,

	// COMMON
	UCLIMIT_COMMON_FIGHTER = UCLIMIT_FIGHTER | UCLIMIT_KNIGHT | UCLIMIT_WARRIOR | UCLIMIT_PALADIN | UCLIMIT_GLADIATOR | UCLIMIT_DRAOON | UCLIMIT_DESTROYER | UCLIMIT_DUELIST | UCLIMIT_BATTLEMASTER,
	UCLIMIT_COMMON_MAGICIAN = UCLIMIT_MAGICIAN | UCLIMIT_MAGE | UCLIMIT_BATTELMAGE | UCLIMIT_WIZARD | UCLIMIT_WARMAGE | UCLIMIT_ARCHMAGE | UCLIMIT_WARLORD | UCLIMIT_DOCTOR | UCLIMIT_ANATOMIST,

	UCLIMIT_COMMON_KNIGHT = UCLIMIT_KNIGHT | UCLIMIT_PALADIN | UCLIMIT_DRAOON | UCLIMIT_DUELIST,
	UCLIMIT_COMMON_WARRIOR = UCLIMIT_WARRIOR | UCLIMIT_GLADIATOR | UCLIMIT_DESTROYER | UCLIMIT_DOCTOR,
	UCLIMIT_COMMON_MAGE = UCLIMIT_MAGE | UCLIMIT_WIZARD | UCLIMIT_ARCHMAGE | UCLIMIT_GUNSLINGER,
	UCLIMIT_COMMON_BATTLEMAGE = UCLIMIT_BATTELMAGE | UCLIMIT_WARMAGE | UCLIMIT_WARLORD | UCLIMIT_BARD,
	UCLIMIT_COMMON_HUNTER = UCLIMIT_HUNTER | UCLIMIT_TRAPPER | UCLIMIT_SENTINEL | UCLIMIT_BATTLEMASTER,
	UCLIMIT_COMMON_RANGER = UCLIMIT_RANGER | UCLIMIT_SNIPER | UCLIMIT_LAUNCHER | UCLIMIT_ANATOMIST,
	UCLIMIT_COMMON_CLOWN = UCLIMIT_CLOWN | UCLIMIT_DANCER | UCLIMIT_MANIAC | UCLIMIT_DESPERADO,
	UCLIMIT_COMMON_ASSASSIN = UCLIMIT_ASSASSIN | UCLIMIT_NINJA | UCLIMIT_SHADOW | UCLIMIT_VOCAL,


	UCLIMIT_COMMON_SHAMAN = UCLIMIT_SHAMAN | UCLIMIT_SUMMONER | UCLIMIT_BEAST_MASTER | UCLIMIT_GAIA_MASTER | UCLASS_ECHIDNA,

	UCLIMIT_COMMON_DOUBLE_FIGHTER = UCLIMIT_DOUBLE_FIGHTER | UCLIMIT_TWINS | UCLIMIT_MIRAGE | UCLIMIT_DRAGON_FIGHTER | UCLASS_DRAGON_SHADOW,
	
	// Market SearchKey
	UCLIMIT_MARKET_FIGHTER = UCLIMIT_FIGHTER | UCLIMIT_KNIGHT | UCLIMIT_WARRIOR | UCLIMIT_PALADIN | UCLIMIT_GLADIATOR | UCLIMIT_DRAOON | UCLIMIT_DESTROYER | UCLIMIT_DRAOON | UCLIMIT_DESTROYER | UCLIMIT_DUELIST | UCLIMIT_DOCTOR,
	UCLIMIT_MARKET_MAGICIAN = UCLIMIT_MAGICIAN | UCLIMIT_MAGE | UCLIMIT_BATTELMAGE | UCLIMIT_WIZARD | UCLIMIT_WARMAGE | UCLIMIT_ARCHMAGE | UCLIMIT_WARLORD | UCLIMIT_ARCHMAGE | UCLIMIT_WARLORD | UCLIMIT_GUNSLINGER | UCLIMIT_BARD,
	UCLIMIT_MARKET_ARCHER = UCLIMIT_ARCHER | UCLIMIT_HUNTER | UCLIMIT_RANGER | UCLIMIT_TRAPPER | UCLIMIT_SNIPER | UCLIMIT_SENTINEL | UCLIMIT_LAUNCHER | UCLIMIT_SENTINEL | UCLIMIT_LAUNCHER | UCLIMIT_BATTLEMASTER | UCLIMIT_ANATOMIST,
	UCLIMIT_MARKET_THIEF = UCLIMIT_THIEF | UCLIMIT_CLOWN | UCLIMIT_ASSASSIN | UCLIMIT_DANCER | UCLIMIT_NINJA | UCLIMIT_MANIAC | UCLIMIT_SHADOW | UCLIMIT_MANIAC | UCLIMIT_SHADOW | UCLIMIT_DESPERADO | UCLIMIT_VOCAL,
	
	UCLIMIT_MARKET_SHAMAN = UCLIMIT_SHAMAN | UCLIMIT_SUMMONER | UCLIMIT_BEAST_MASTER | UCLIMIT_GAIA_MASTER | UCLASS_ECHIDNA,
	UCLIMIT_MARKET_DOUBLE_FIGHTER = UCLIMIT_DOUBLE_FIGHTER | UCLIMIT_TWINS | UCLIMIT_MIRAGE | UCLIMIT_DRAGON_FIGHTER | UCLASS_DRAGON_SHADOW,

	// SkillSet 몇차 전직?
	UCLIMIT_ONE_CLASS = UCLIMIT_FIGHTER | UCLIMIT_MAGICIAN | UCLIMIT_ARCHER | UCLIMIT_THIEF,
	UCLIMIT_TWO_CLASS = UCLIMIT_KNIGHT | UCLIMIT_WARRIOR | UCLIMIT_MAGE | UCLIMIT_BATTELMAGE | UCLIMIT_HUNTER | UCLIMIT_RANGER | UCLIMIT_CLOWN | UCLIMIT_ASSASSIN,
	UCLIMIT_THREE_CLASS = UCLIMIT_PALADIN | UCLIMIT_GLADIATOR | UCLIMIT_WIZARD | UCLIMIT_WARMAGE | UCLIMIT_TRAPPER | UCLIMIT_SNIPER | UCLIMIT_DANCER | UCLIMIT_NINJA,
	UCLIMIT_FOUR_CLASS = UCLIMIT_DRAOON | UCLIMIT_DESTROYER | UCLIMIT_ARCHMAGE | UCLIMIT_WARLORD | UCLIMIT_SENTINEL | UCLIMIT_LAUNCHER | UCLIMIT_MANIAC | UCLIMIT_SHADOW,
	UCLIMIT_FIVE_CLASS = UCLIMIT_DUELIST | UCLIMIT_DOCTOR | UCLIMIT_GUNSLINGER | UCLIMIT_BARD | UCLIMIT_BATTLEMASTER | UCLIMIT_ANATOMIST | UCLIMIT_DESPERADO | UCLIMIT_VOCAL,
	
	// 모든 인간 직업
	UCLIMIT_ALL_HUMAN = 137438953470,
	// 모든 용족 직업
	UCLIMIT_ALL_DRAGONIAN = -2251799813685248,
	// 모든 인간,용족 직업
	UCLIMIT_ALL = -2251662374731778i64,//UINT_MAX,
}EClass_Limit;

#define GET_CLASS_LIMIT(iclass) ((iclass) ? __int64(1) << (iclass) : (0))
#define IS_CLASS_LIMIT(i64Value, iclass) ((i64Value & GET_CLASS_LIMIT(iclass)) != 0)
#define IS_CLASS_LIMIT2(i64Value, iclass) ((i64Value & iclass) != 0)

inline __int64 HumanAddFiveJobClassLimit(__int64 i64ClassLimit)
{
	if (i64ClassLimit == 0)
		return i64ClassLimit;

	if (IS_CLASS_LIMIT(i64ClassLimit, UCLASS_DRAOON))
		i64ClassLimit |= UCLIMIT_DUELIST;
	if (IS_CLASS_LIMIT(i64ClassLimit, UCLASS_DESTROYER))
		i64ClassLimit |= UCLIMIT_DOCTOR;
	if (IS_CLASS_LIMIT(i64ClassLimit, UCLASS_ARCHMAGE))
		i64ClassLimit |= UCLIMIT_GUNSLINGER;
	if (IS_CLASS_LIMIT(i64ClassLimit, UCLASS_WARLORD))
		i64ClassLimit |= UCLIMIT_BARD;
	if (IS_CLASS_LIMIT(i64ClassLimit, UCLASS_SENTINEL))
		i64ClassLimit |= UCLIMIT_BATTLEMASTER;
	if (IS_CLASS_LIMIT(i64ClassLimit, UCLASS_LAUNCHER))
		i64ClassLimit |= UCLIMIT_ANATOMIST;
	if (IS_CLASS_LIMIT(i64ClassLimit, UCLASS_MANIAC))
		i64ClassLimit |= UCLIMIT_DESPERADO;
	if (IS_CLASS_LIMIT(i64ClassLimit, UCLASS_SHADOW))
		i64ClassLimit |= UCLIMIT_VOCAL;
	return i64ClassLimit;
}

//#define SKILL_GROUP_UNIT	10
#define MAX_NETWORKDELAY	6000

#define GET_BASICSKILL_NUM(num) (num / 100 * 100 + 1)

//#define PLAYER_MAX_DEFAULT_SKILL_NUM	20000

// Object Type
typedef enum eQuestObjectType
{
	QOT_None = 0,
	QOT_NPC = 1,
	QOT_Monster = 2,
	QOT_Trigger = 3,
	QOT_Item = 4,
	QOT_Time = 5,
	QOT_ShineStone = 6,
	QOT_Location = 7,
	QOT_Dialog = 8,
	QOT_Trap = 9,	// Trap Damage 주기 위함
} EQuestObjectType;

// Data Compare Ret
typedef enum eDataCompareRet
{
	DC_RET_EQUAL	= 0x00,//같다
	DC_RET_LOST		= 0x01,//없어졌다.
	DC_RET_ADDTION	= 0x02,//추가되었다.
	DC_RET_MODIFY	= 0x04,//수정되었다.
	DC_RET_ERROR	= 0xFF,
};
typedef BYTE EDataCompareRet;

// Trigger Action type
#define TRIGGER_ACTION_COLLISION	0x00000010 // 충돌 ->곧 스킬ID 로 변경할 것이다.
#define TRIGGER_ACTION_CLICKED		0x00000001// mouse click

#define MAKE_BYTE_FROM_BIT(byConvert, bit1, bit2, bit3, bit4, bit5, bit6, bit7, bit8) {\
	byConvert = (BYTE)bit1 | ((BYTE)bit2 << 1) | ((BYTE)bit3 << 2) | ((BYTE)bit4 << 3) | ((BYTE)bit5 << 4) | ((BYTE)bit6 << 5) | ((BYTE)bit7 << 6) | ((BYTE)bit8 << 7); }

#define READ_BIT_TO_BYTE(bySource, bitpos, byTarget) {\
	byTarget = bySource & (1 << bitpos); }

#define READ_BIT_TO_BOOL(bySource, bitpos, byTarget) {\
	byTarget = ((bySource & (1 << (BYTE)bitpos))?true:false); }

#define MAKE_DWORD_FROM_BYTE(byConvert, byte1, byte2, byte3, byte4) {\
	byConvert = (byte1 ) | (byte2 << 8) | (byte3 << 16) | (byte4 << 24); }

#define READ_BYTE_TO_DWORD(bySource, bytepos, byTarget) {\
	byTarget = ((bySource >> (8 * bytepos)) && 0x000000FF); }

#define READ_DWORD_TO_BOOL(bySource, bytepos, byTarget) {\
	byTarget = ((bySource & (1 << bytepos)) ? true : false); }


typedef struct 
{
	void Init()
	{
		eResult = ESFResult_Success;
		iCauseID = 0;
	}

	enum ESkillFilterResult
	{
		ESFResult_Success = 0,		// Success
		ESFResult_NeedEffect = 1,	// Effect 없어서 할 수 없다.
		ESFResult_LimitEffect = 2,	// Effect 있어서 할 수 없다.
	}eResult;
	int iCauseID;
} SSFilter_Result;

#define SYNC_ADDED_NUM 357

int const PvP_Lobby_GroundNo_AnterRoom = 1;//로비 대기실
int const PvP_Lobby_GroundNo_Exercise = 2;
int const PvP_Lobby_GroundNo_Ranking = 3;
int const PvP_Lobby_GroundNo_League = 4;
int const PvP_Lobby_GroundNo_Max = 5;
int const HardCoreDungeon = 6;

typedef enum eWriteType
{
	WT_NONE					= 0x0000,
	WT_DEFAULT				= 0x0001,
	WT_SIMPLE				= 0x0002,
	WT_GMORDER				= 0x0012,
	WT_DEFAULT_EXCLUDE		= 0x0020,	// Default에 포함되어 있지 않지만, 추가적으로 하고 싶을때
	WTCHK_TYPE				= 0x00FF,// 타입을 체크

	WT_EFFECT_FLAG			= WT_DEFAULT|WT_SIMPLE,
	WT_DEFAULT_WITH_EXCLUDE = WT_DEFAULT|WT_DEFAULT_EXCLUDE,

	// Option으로 사용 할 수 있는 Flag
	WT_OP_MISSION			= 0x0100,
	WT_OP_NOHPMP			= 0x0200,//Update된 데이터만 보낸다.
	WT_OP_COPY_PREMIUM		= 0x0400,//프리미엄서비스를 복사한다.
	WT_OP_No_Contents		= 0x1000,	// ContentsServer에서는 MapServer에서 온 유저정보 중에서 Inven관련 정보는 버려야 한다.
	WT_OP_DBPlayerState		= 0x8000, // DB [State] 필드를 보내준다

	WT_CHECK_EXTERNDATA		= WT_OP_MISSION,

	WT_MAPMOVE_SERVER		= WT_DEFAULT|WT_OP_MISSION,
	WT_MAPMOVE_CLIENT		= WT_DEFAULT,
//	WT_MAPMOVE_PVP			= WT_DEFAULT|WT_OP_PVP_REPORT,
	WT_MAPMOVE_FIRST		= WT_MAPMOVE_SERVER,
};
typedef WORD EWRITETYPE;

float const Item_PickUp_Distance = 200.0f;

typedef enum 
{
	//E_TIME_ELAPSED_TYPE_NONE = 0,
	E_TIME_ELAPSED_TYPE_PLAYTIME = 0,	// Item Abil(AT_DURATION_TIME_TYPE)에서 사용 : 입력안되어 있으면 PlayTime 값이 default
	E_TIME_ELAPSED_TYPE_WORLDTIME = 1,
} E_TIME_ELAPSED_TYPE;

int const AWAKE_VALUE_MAX = 5000; // 각성치 최대값

int const COUPLE_SKILL_AREA = 90000701; // 커플이 되면 걸리는 스킬
int const COUPLE_SKILL_RING = 90000401; // 커플링 스킬

// ActionEffect (왜 이름을 이렇게 지어놨는지 모르겠지만, 실제로는 액션임 피격시 하는 액션)
// 블록
int const ACTIONEFFECT_BLOCK = 100005457;
//감전
int const ACTIONEFFECT_LIGHTING_DEFAULT = 100002001;	//a_lightning_default
int const ACTIONEFFECT_LIGHTING_LOW = 100002011;		//a_lightning_low
int const ACTIONEFFECT_LIGHTING_THROW_DOWN = 100005432;	//a_lightning_throw_down
int const ACTIONEFFECT_LIGHTING_FLOAT_DMG = 100005433;	//a_lightning_float_dmg
// 밀리기
int const ACTIONEFFECT_PUSH_BACK_PUBLIC_1 = 310001;		//a_push_back_public
int const ACTIONEFFECT_PUSH_BACK_PUBLIC_2 = 310101;		//a_push_back_public
int const ACTIONEFFECT_PUSH_BACK = 100005712;		//a_push_back
int const ACTIONEFFECT_PUSH_BACK1 = 100009201;		//a_push_back1
int const ACTIONEFFECT_PUSH_BACK2 = 100009501;		//a_push_back2
int const ACTIONEFFECT_PUSH_BACK_SHORT_1 = 3000301;		//a_push_back_short
int const ACTIONEFFECT_PUSH_BACK_SHORT_2 = 100005711;	//a_push_back_short
int const ACTIONEFFECT_PUSH_BACK_LONG_1 = 3000401;	//a_push_back_long
int const ACTIONEFFECT_PUSH_BACK_LONG_2 = 100005713;//a_push_back_long
int const ACTIONEFFECT_PUSH_BACK_LONG1 = 100009301;	//a_push_back_long1
int const ACTIONEFFECT_PUSH_BACK_LONG2 = 100009601;	//a_push_back_long2
int const ACTIONEFFECT_PUSH_BACK_SHORT1 = 100009101;	//a_push_back_short1
int const ACTIONEFFECT_PUSH_BACK_SHORT2 = 100009401;	//a_push_back_short2
// 제자리 다운
int const ACTIONEFFECT_BLOW_DOWN = 100004701;		//
// 공중에 띄워지기
int const ACTIONEFFECT_BLOW_UP_S = 100004801;		//
int const ACTIONEFFECT_BLOW_UP_M = 100004901;		//
int const ACTIONEFFECT_BLOW_UP_L = 100005001;		//
// 죽을때
int const ACTIONEFFECT_DIE = 100002101;
int const ACTIONEFFECT_VOLUNTARILY_DIE = 100002103;
// 데미지 액션
int const ACTIONEFFECT_DMG = 100001901;
// 부활
int const ACTIONEFFECT_REVIVE = 10100;
int const ACTIONEFFECT_RESURRECTION01 = 11101;
int const ACTIONEFFECT_RESURRECTION1 = 109001001;
int const ACTIONEFFECT_RESURRECTION2 = 109001002;
int const ACTIONEFFECT_RESURRECTION3 = 109001003;
int const ACTIONEFFECT_RESURRECTION4 = 109001004;
int const ACTIONEFFECT_RESURRECTION5 = 109001005;
#endif // WEAPON_VARIANT_BASIC_CONSTANT_CONSTANT_H